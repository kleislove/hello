<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.crazylemon.dao.ShoesDAO">
  <resultMap id="BaseResultMap" type="com.crazylemon.entity.Shoes">
    <id column="shoes_id" jdbcType="INTEGER" property="shoesId" />
    <result column="shoes_number" jdbcType="INTEGER" property="shoesNumber" />
    <result column="shoes_name" jdbcType="VARCHAR" property="shoesName" />
    <result column="shoes_price_sale" jdbcType="REAL" property="shoesPriceSale" />
    <result column="shoes_discount" jdbcType="REAL" property="shoesDiscount" />
    <result column="shoes_desc" jdbcType="VARCHAR" property="shoesDesc" />
    <result column="shoes_onsale_time" jdbcType="DATE" property="shoesOnsaleTime" />
    <result column="shoes_offsale_time" jdbcType="DATE" property="shoesOffsaleTime" />
    <result column="shoes_sale_count" jdbcType="INTEGER" property="shoesSaleCount" />
    <result column="shoes_gender" jdbcType="TINYINT" property="shoesGender" />
    <result column="shoes_status" jdbcType="TINYINT" property="shoesStatus" />
    <result column="category_id" jdbcType="INTEGER" property="categoryId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    shoes_id, shoes_number, shoes_name, shoes_price_sale, shoes_discount, shoes_desc, 
    shoes_onsale_time, shoes_offsale_time, shoes_sale_count, shoes_gender, shoes_status, 
    category_id
  </sql>
  <select id="selectByExample" parameterType="com.crazylemon.entity.ShoesExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from shoes
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from shoes
    where shoes_id = #{shoesId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from shoes
    where shoes_id = #{shoesId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.crazylemon.entity.ShoesExample">
    delete from shoes
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.crazylemon.entity.Shoes">
    insert into shoes (shoes_id, shoes_number, shoes_name, 
      shoes_price_sale, shoes_discount, shoes_desc, 
      shoes_onsale_time, shoes_offsale_time, shoes_sale_count, 
      shoes_gender, shoes_status, category_id
      )
    values (#{shoesId,jdbcType=INTEGER}, #{shoesNumber,jdbcType=INTEGER}, #{shoesName,jdbcType=VARCHAR}, 
      #{shoesPriceSale,jdbcType=REAL}, #{shoesDiscount,jdbcType=REAL}, #{shoesDesc,jdbcType=VARCHAR}, 
      #{shoesOnsaleTime,jdbcType=DATE}, #{shoesOffsaleTime,jdbcType=DATE}, #{shoesSaleCount,jdbcType=INTEGER}, 
      #{shoesGender,jdbcType=TINYINT}, #{shoesStatus,jdbcType=TINYINT}, #{categoryId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.crazylemon.entity.Shoes">
    insert into shoes
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="shoesId != null">
        shoes_id,
      </if>
      <if test="shoesNumber != null">
        shoes_number,
      </if>
      <if test="shoesName != null">
        shoes_name,
      </if>
      <if test="shoesPriceSale != null">
        shoes_price_sale,
      </if>
      <if test="shoesDiscount != null">
        shoes_discount,
      </if>
      <if test="shoesDesc != null">
        shoes_desc,
      </if>
      <if test="shoesOnsaleTime != null">
        shoes_onsale_time,
      </if>
      <if test="shoesOffsaleTime != null">
        shoes_offsale_time,
      </if>
      <if test="shoesSaleCount != null">
        shoes_sale_count,
      </if>
      <if test="shoesGender != null">
        shoes_gender,
      </if>
      <if test="shoesStatus != null">
        shoes_status,
      </if>
      <if test="categoryId != null">
        category_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="shoesId != null">
        #{shoesId,jdbcType=INTEGER},
      </if>
      <if test="shoesNumber != null">
        #{shoesNumber,jdbcType=INTEGER},
      </if>
      <if test="shoesName != null">
        #{shoesName,jdbcType=VARCHAR},
      </if>
      <if test="shoesPriceSale != null">
        #{shoesPriceSale,jdbcType=REAL},
      </if>
      <if test="shoesDiscount != null">
        #{shoesDiscount,jdbcType=REAL},
      </if>
      <if test="shoesDesc != null">
        #{shoesDesc,jdbcType=VARCHAR},
      </if>
      <if test="shoesOnsaleTime != null">
        #{shoesOnsaleTime,jdbcType=DATE},
      </if>
      <if test="shoesOffsaleTime != null">
        #{shoesOffsaleTime,jdbcType=DATE},
      </if>
      <if test="shoesSaleCount != null">
        #{shoesSaleCount,jdbcType=INTEGER},
      </if>
      <if test="shoesGender != null">
        #{shoesGender,jdbcType=TINYINT},
      </if>
      <if test="shoesStatus != null">
        #{shoesStatus,jdbcType=TINYINT},
      </if>
      <if test="categoryId != null">
        #{categoryId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.crazylemon.entity.ShoesExample" resultType="java.lang.Long">
    select count(*) from shoes
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update shoes
    <set>
      <if test="record.shoesId != null">
        shoes_id = #{record.shoesId,jdbcType=INTEGER},
      </if>
      <if test="record.shoesNumber != null">
        shoes_number = #{record.shoesNumber,jdbcType=INTEGER},
      </if>
      <if test="record.shoesName != null">
        shoes_name = #{record.shoesName,jdbcType=VARCHAR},
      </if>
      <if test="record.shoesPriceSale != null">
        shoes_price_sale = #{record.shoesPriceSale,jdbcType=REAL},
      </if>
      <if test="record.shoesDiscount != null">
        shoes_discount = #{record.shoesDiscount,jdbcType=REAL},
      </if>
      <if test="record.shoesDesc != null">
        shoes_desc = #{record.shoesDesc,jdbcType=VARCHAR},
      </if>
      <if test="record.shoesOnsaleTime != null">
        shoes_onsale_time = #{record.shoesOnsaleTime,jdbcType=DATE},
      </if>
      <if test="record.shoesOffsaleTime != null">
        shoes_offsale_time = #{record.shoesOffsaleTime,jdbcType=DATE},
      </if>
      <if test="record.shoesSaleCount != null">
        shoes_sale_count = #{record.shoesSaleCount,jdbcType=INTEGER},
      </if>
      <if test="record.shoesGender != null">
        shoes_gender = #{record.shoesGender,jdbcType=TINYINT},
      </if>
      <if test="record.shoesStatus != null">
        shoes_status = #{record.shoesStatus,jdbcType=TINYINT},
      </if>
      <if test="record.categoryId != null">
        category_id = #{record.categoryId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update shoes
    set shoes_id = #{record.shoesId,jdbcType=INTEGER},
      shoes_number = #{record.shoesNumber,jdbcType=INTEGER},
      shoes_name = #{record.shoesName,jdbcType=VARCHAR},
      shoes_price_sale = #{record.shoesPriceSale,jdbcType=REAL},
      shoes_discount = #{record.shoesDiscount,jdbcType=REAL},
      shoes_desc = #{record.shoesDesc,jdbcType=VARCHAR},
      shoes_onsale_time = #{record.shoesOnsaleTime,jdbcType=DATE},
      shoes_offsale_time = #{record.shoesOffsaleTime,jdbcType=DATE},
      shoes_sale_count = #{record.shoesSaleCount,jdbcType=INTEGER},
      shoes_gender = #{record.shoesGender,jdbcType=TINYINT},
      shoes_status = #{record.shoesStatus,jdbcType=TINYINT},
      category_id = #{record.categoryId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.crazylemon.entity.Shoes">
    update shoes
    <set>
      <if test="shoesNumber != null">
        shoes_number = #{shoesNumber,jdbcType=INTEGER},
      </if>
      <if test="shoesName != null">
        shoes_name = #{shoesName,jdbcType=VARCHAR},
      </if>
      <if test="shoesPriceSale != null">
        shoes_price_sale = #{shoesPriceSale,jdbcType=REAL},
      </if>
      <if test="shoesDiscount != null">
        shoes_discount = #{shoesDiscount,jdbcType=REAL},
      </if>
      <if test="shoesDesc != null">
        shoes_desc = #{shoesDesc,jdbcType=VARCHAR},
      </if>
      <if test="shoesOnsaleTime != null">
        shoes_onsale_time = #{shoesOnsaleTime,jdbcType=DATE},
      </if>
      <if test="shoesOffsaleTime != null">
        shoes_offsale_time = #{shoesOffsaleTime,jdbcType=DATE},
      </if>
      <if test="shoesSaleCount != null">
        shoes_sale_count = #{shoesSaleCount,jdbcType=INTEGER},
      </if>
      <if test="shoesGender != null">
        shoes_gender = #{shoesGender,jdbcType=TINYINT},
      </if>
      <if test="shoesStatus != null">
        shoes_status = #{shoesStatus,jdbcType=TINYINT},
      </if>
      <if test="categoryId != null">
        category_id = #{categoryId,jdbcType=INTEGER},
      </if>
    </set>
    where shoes_id = #{shoesId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.crazylemon.entity.Shoes">
    update shoes
    set shoes_number = #{shoesNumber,jdbcType=INTEGER},
      shoes_name = #{shoesName,jdbcType=VARCHAR},
      shoes_price_sale = #{shoesPriceSale,jdbcType=REAL},
      shoes_discount = #{shoesDiscount,jdbcType=REAL},
      shoes_desc = #{shoesDesc,jdbcType=VARCHAR},
      shoes_onsale_time = #{shoesOnsaleTime,jdbcType=DATE},
      shoes_offsale_time = #{shoesOffsaleTime,jdbcType=DATE},
      shoes_sale_count = #{shoesSaleCount,jdbcType=INTEGER},
      shoes_gender = #{shoesGender,jdbcType=TINYINT},
      shoes_status = #{shoesStatus,jdbcType=TINYINT},
      category_id = #{categoryId,jdbcType=INTEGER}
    where shoes_id = #{shoesId,jdbcType=INTEGER}
  </update>
</mapper>